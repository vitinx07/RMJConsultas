import requests
import json
from datetime import datetime
import time

# --- CONFIGURAÇÃO DAS APIS ---
BEMPROMOTORA_API_BASE_URL = "https://api.techbem.com.br/integracao-corban"
MULTICORBAN_API_URL = "https://api.multicorban.com/offline"

# ==============================================================================
# FUNÇÕES AUXILIARES
# ==============================================================================

def format_currency(value):
    """Formata um valor para o padrão de moeda brasileiro."""
    try:
        return f"R$ {float(value):,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    except (ValueError, TypeError):
        return "R$ N/A"

def print_header(title, character="="):
    """Cria um cabeçalho formatado para as seções do programa."""
    print("\n" + character*60)
    print(f"  {title.upper()}")
    print(character*60)

# ==============================================================================
# FUNÇÕES DE API
# ==============================================================================

def get_bempromotora_token(username, password):
    """Autentica na API da Bem Promotora."""
    auth_url = f"{BEMPROMOTORA_API_BASE_URL}/Autenticacao/Autenticar"
    payload = {"usuario": username, "senha": password}
    try:
        print(f"Autenticando na Bem Promotora...")
        response = requests.post(auth_url, headers={"Content-Type": "application/json"}, json=payload, timeout=30)
        response.raise_for_status()
        token_data = response.json()
        if token_data.get("retorno") and token_data["retorno"].get("jwtToken"):
            print("✅ Autenticação bem-sucedida!")
            return token_data["retorno"]["jwtToken"]
        return None
    except Exception as err:
        print(f"❗ Falha na autenticação: {err}"); return None

def get_bempromotora_contracts(token, cpf):
    """Busca os contratos de um cliente na API da Bem Promotora."""
    contracts_url = f"{BEMPROMOTORA_API_BASE_URL}/contratos"
    headers = {"Authorization": f"Bearer {token}"}
    params = {'CpfCliente': cpf}
    try:
        print(f"\nBuscando contratos na Bem Promotora para o CPF: {cpf}...")
        response = requests.get(contracts_url, headers=headers, params=params, timeout=30)
        response.raise_for_status()
        print("✅ Busca de contratos na Bem Promotora finalizada.")
        return response.json().get('retorno')
    except Exception as err:
        print(f"❗ Ocorreu um erro ao buscar os contratos na Bem Promotora: {err}"); return None

def get_multicorban_data(api_key, beneficio):
    """Realiza a consulta completa na API Multi Corban."""
    headers = {'Authorization': api_key, 'Content-Type': 'application/json'}
    payload = {"beneficio": beneficio}
    print(f"\nBuscando dados cadastrais para o benefício: {beneficio}...")
    try:
        response = requests.post(MULTICORBAN_API_URL, headers=headers, data=json.dumps(payload), timeout=60)
        response.raise_for_status()
        print("✅ Consulta de dados cadastrais realizada com sucesso!")
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        print(f"❗ ERRO NA CONSULTA CADASTRAL: {http_err.response.status_code}\n{http_err.response.text}")
        return None
    except Exception as e:
        print(f"❗ Ocorreu um erro de conexão ao consultar dados cadastrais: {e}"); return None

def simulate_refinancing(token, payload):
    """Chama o endpoint de refinanciamento para simulação."""
    url = f"{BEMPROMOTORA_API_BASE_URL}/v2/refinanciamentos"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    try:
        print("\n--- SIMULANDO OPORTUNIDADE ---")
        response = requests.post(url, headers=headers, json=payload, timeout=60)
        response.raise_for_status()
        print(f"✅ Requisição para simulação enviada com sucesso!")
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        print(f"❗ ERRO HTTP AO SIMULAR: {http_err.response.status_code}")
        print("Resposta do Servidor:", http_err.response.text)
        return None
    except Exception as err:
        print(f"❗ Ocorreu um erro inesperado na simulação: {err}"); return None

# ==============================================================================
# FLUXO PRINCIPAL DE SIMULAÇÃO
# ==============================================================================

def main():
    multicorban_api_key = "379825096e2347b3064194022ea59b03"
    bempromotora_username = "7048WS"
    bempromotora_password = "WH63C]M)hUs%"
    
    print_header("Robô de Simulação de Refinanciamento", "*")

    # --- PASSO 1: CONSULTAS INTEGRADAS ---
    cpf_cliente = input("Digite o CPF do cliente para iniciar: ")
    access_token = get_bempromotora_token(bempromotora_username, bempromotora_password)
    if not access_token: return

    banrisul_contracts = get_bempromotora_contracts(access_token, cpf_cliente)
    if not banrisul_contracts:
        print("\nNenhum contrato encontrado na Bem Promotora para este CPF."); return

    refinanciable_contracts = [c for c in banrisul_contracts if c.get('refinanciavel')]
    if not refinanciable_contracts:
        print("\nNenhum contrato elegível para refinanciamento foi encontrado."); return
    
    matricula_cliente = refinanciable_contracts[0].get('matricula')
    if not matricula_cliente: return

    full_client_data = get_multicorban_data(multicorban_api_key, matricula_cliente)
    if not full_client_data: return
    
    # --- PASSO 2: MAPEAMENTO E FORMATAÇÃO ---
    print("\nMapeando contratos e aplicando formatação...")
    enriched_contracts = []
    multicorban_loans = full_client_data.get('Emprestimos', [])
    for banri_contract in refinanciable_contracts:
        pmt_banri = banri_contract.get('pmtOriginal')
        for mc_loan in multicorban_loans:
            pmt_mc = mc_loan.get('ValorParcela')
            if pmt_banri is not None and pmt_mc is not None and abs(pmt_banri - pmt_mc) < 0.01:
                unmasked_contract = mc_loan.get('Contrato', '').strip()
                formatted_contract = str(int(unmasked_contract)).zfill(10) if unmasked_contract.isdigit() else unmasked_contract
                enriched_contracts.append({'original_banri': banri_contract, 'unmasked_contract': formatted_contract})
                break
    
    if not enriched_contracts:
        print("Não foi possível encontrar uma correspondência para os contratos refinanciáveis."); return
    
    print(f"✅ {len(enriched_contracts)} contrato(s) mapeado(s) com sucesso!")

    # --- PASSO 3: SIMULAÇÃO E APRESENTAÇÃO ---
    beneficiario_data = full_client_data.get('Beneficiario', {})
    chosen_opportunity = enriched_contracts[0]
    
    # --- CORREÇÃO APLICADA AQUI ---
    # Usando sempre o CPF que o usuário digitou no início para garantir consistência.
    simulation_payload = {
        "cpf": cpf_cliente, 
        "dataNascimento": beneficiario_data.get('DataNascimento'),
        "conveniada": chosen_opportunity['original_banri'].get('conveniada'),
        "contratosRefinanciamento": [{"contrato": chosen_opportunity['unmasked_contract'], "dataContrato": chosen_opportunity['original_banri'].get('dataContrato')}],
        "prestacao": chosen_opportunity['original_banri'].get('pmtOriginal'), "retornarSomenteOperacoesViaveis": True
    }
    
    simulation_result = simulate_refinancing(access_token, simulation_payload)
    if not (simulation_result and simulation_result.get('retorno')):
        print("\nNão foi possível obter um resultado viável da simulação."); return
    
    best_option = next((res for res in simulation_result['retorno'] if res.get('prazo') == '096'), None)
    if not best_option:
        print("\nNenhuma opção de simulação encontrada para o prazo de 96 meses."); return
        
    print_header("✨ OPORTUNIDADE DE REFINANCIAMENTO ENCONTRADA ✨", "*")
    print(f"  Contrato a Refinanciar..: {chosen_opportunity['unmasked_contract']}")
    print(f"  Mantendo a Parcela de...: {format_currency(chosen_opportunity['original_banri'].get('pmtOriginal'))}")
    print("------------------------------------------------------------")
    print(f"  ✅ Valor Liberado (Troco): {format_currency(best_option.get('valorAF'))}")
    print(f"  ✅ Novo Prazo............: {best_option.get('prazo')} meses")
    print(f"  ✅ Plano Ofertado........: {best_option.get('descricaoPlano')}")
    print("============================================================")
    print("\nAnálise finalizada.")

if __name__ == "__main__":
    main()