import requests
import json
from datetime import datetime

# --- Funções de Formatação (sem alterações) ---
def formatar_data(data_str):
    if not data_str:
        return "N/A"
    try:
        return datetime.strptime(data_str, '%Y-%m-%d').strftime('%d/%m/%Y')
    except ValueError:
        return data_str

def formatar_moeda(valor):
    try:
        return f"R$ {float(valor):,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    except (ValueError, TypeError):
        return "N/A"

# --- Função de Impressão (sem alterações) ---
def imprimir_relatorio_beneficio(data):
    print("\n" + "="*60)
    print(" " * 18 + "RELATÓRIO DETALHADO DO BENEFÍCIO")
    print("="*60)

    beneficiario = data.get('Beneficiario', {})
    if beneficiario:
        print("\n--- DADOS DO BENEFICIÁRIO ---")
        print(f"Nome: {beneficiario.get('Nome', 'N/A')}")
        print(f"CPF: {beneficiario.get('CPF', 'N/A')}")
        print(f"Data de Nascimento: {formatar_data(beneficiario.get('DataNascimento'))}")
        print(f"Nome da Mãe: {beneficiario.get('NomeMae', 'N/A')}")
        print(f"Benefício: {beneficiario.get('Beneficio', 'N/A')} | Espécie: {beneficiario.get('Especie', 'N/A')} | Situação: {beneficiario.get('Situacao', 'N/A')}")

    resumo = data.get('Resumo Financeiro', {})
    if resumo:
        print("\n--- RESUMO FINANCEIRO ---")
        print(f"Valor do Benefício: {formatar_moeda(resumo.get('ValorBeneficio'))}")
        print(f"Margem para Empréstimo: {formatar_moeda(resumo.get('MargemDisponivelEmprestimo'))}")
    else:
        print("\n--- RESUMO FINANCEIRO ---")
        print("Dados financeiros não disponíveis para este benefício.")

    emprestimos = data.get('Emprestimos', [])
    if emprestimos:
        print("\n--- DETALHAMENTO DE EMPRÉSTIMOS ---")
        for i, emp in enumerate(emprestimos):
            print(f"\n  > Contrato #{i+1}")
            print(f"    Número do Contrato: {emp.get('Contrato', 'N/A')} | Banco: {emp.get('Banco', 'N/A')}")
            print(f"    Valor da Parcela: {formatar_moeda(emp.get('ValorParcela'))} | Valor do Empréstimo: {formatar_moeda(emp.get('ValorEmprestimo'))}")
            print(f"    Prazo: {emp.get('Prazo', 'N/A')} | Parcelas Restantes: {emp.get('ParcelasRestantes', 'N/A')}")
            print(f"    Data de Averbação: {formatar_data(emp.get('DataAverbacao'))}")
    else:
        print("\n--- DETALHAMENTO DE EMPRÉSTIMOS ---")
        print("Nenhum contrato de empréstimo encontrado para este benefício.")

    print("\n" + "="*60 + "\n")

# --- Função Principal Modificada para Diagnóstico ---
def consultar_cpf_e_detalhar_beneficios(api_key, cpf):
    url_cpf = "https://api.multicorban.com/cpf"
    headers = {'Authorization': api_key, 'Content-Type': 'application/json'}
    payload_cpf = {"cpf": cpf}

    print(f"--- 1. BUSCANDO BENEFÍCIOS PARA O CPF: {cpf} ---")

    try:
        response_cpf = requests.post(url_cpf, headers=headers, data=json.dumps(payload_cpf))

        if response_cpf.status_code != 200:
            print(f"\n!!! ERRO AO CONSULTAR O CPF !!!")
            print(f"Código de Status: {response_cpf.status_code} | Resposta: {response_cpf.text}")
            return

        lista_beneficios = response_cpf.json()

        # AJUSTE DE DIAGNÓSTICO: Imprimindo a resposta bruta para análise
        print("\n--- RESPOSTA BRUTA DO ENDPOINT CPF (PARA DIAGNÓSTICO) ---")
        print(json.dumps(lista_beneficios, indent=2, ensure_ascii=False))
        print("--- FIM DA RESPOSTA BRUTA ---\n")

        if not lista_beneficios or not isinstance(lista_beneficios, list):
            print("Nenhum benefício encontrado para este CPF ou a resposta não é uma lista.")
            return

        print(f"Sucesso! {len(lista_beneficios)} benefício(s) encontrado(s).")
        print("--- 2. BUSCANDO DETALHES E CONTRATOS DE CADA BENEFÍCIO ---")

        for beneficio_info in lista_beneficios:
            num_beneficio = beneficio_info.get('Beneficio') # Esta linha provavelmente está errada
            if not num_beneficio:
                print("\nAVISO: Um item da lista não continha a chave 'Beneficio'. Pulando.")
                continue

            print(f"\nConsultando detalhes para o benefício: {num_beneficio}...")

            url_offline = "https://api.multicorban.com/offline"
            payload_beneficio = {"beneficio": num_beneficio}

            try:
                response_detalhes = requests.post(url_offline, headers=headers, data=json.dumps(payload_beneficio))

                if response_detalhes.status_code == 200:
                    imprimir_relatorio_beneficio(response_detalhes.json())
                else:
                    print(f"Falha ao obter detalhes para o benefício {num_beneficio}. Status: {response_detalhes.status_code}")

            except requests.exceptions.RequestException as e:
                print(f"Erro de conexão ao buscar detalhes do benefício {num_beneficio}: {e}")

    except requests.exceptions.RequestException as e:
        print(f"Ocorreu um erro de conexão ao tentar consultar o CPF: {e}")

# --- ENTRADA DE DADOS ---
print("--- Consulta Completa à API MULTI CORBAN por CPF ---")
api_key_do_usuario = "4630e3b1ad52c0397c64c81e5a3fb8ec"
numero_do_cpf = input("Digite o CPF para buscar todos os benefícios e contratos associados: ")

if api_key_do_usuario and numero_do_cpf:
    consultar_cpf_e_detalhar_beneficios(api_key_do_usuario, numero_do_cpf)
else:
    print("O CPF é obrigatório.")